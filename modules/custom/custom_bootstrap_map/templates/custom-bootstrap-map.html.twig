
{# custom_bootstrap_map/templates/custom-bootstrap-map.html.twig #}

<h1 class="white-text custom-block-title text-center mar-top-40">Makers Map</h1>

<div id='map' style='width: 100%; height: 700px;'></div>

<ul class="map-locations-list">
  {% for place in locations %}
    <li class="map-list-item" map-locations-list-slug="{{ place['location_slug'] | replace({"\/location\/": ""}) }}" onClick="openPopup(this)">{{ place['location_title'] }}</li>
  {% endfor %}
</ul>

<div id="under-map-line" class="blue"></div>

<div class="white-bg" id="map-filter-container">
  <div class="col-12 valign-wrapper" id="filter">
    <span class="grey-text text-darken-3" id="filter">Filter: </span>
    <a class="waves-effect waves-light btn indigo darken-4 map-filter-item" data-filter="all"> Show All </a>
  </div>
  <div class="col-12">
    <ul class="map-filter-list">
      {% for tool in tools %}
        <li class="map-filter-item text-center" data-filter="{{ tool['cat_name'] | replace({' ' : '-'}) | lower }}">
          <img src="{{ tool['cat_image'] }}" >
          <span class="text-content">{{ tool['cat_name'] }}</span>
        </li>
      {% endfor %}
    </ul>
  </div>
</div>

<script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic2xhYiIsImEiOiJja2lnZ2FuajAwMWIxMnpwOGliNjM2YmxuIn0.bRm0Q9RBHGIpyobJOWJ5zQ';
  var map = new mapboxgl.Map({
    container: 'map', // container ID
    center: [-78.505186, 38.035544],
    zoom: 15,
    style: 'mapbox://styles/mapbox/streets-v11',
  });

  map.scrollZoom.disable();


  // sorts list of locations created above
  var items = $('.map-locations-list li').get();
  items.sort(function (a, b) {
    var keyA = $(a).text().toLowerCase();
    var keyB = $(b).text().toLowerCase();

    if (keyA < keyB) return -1;
    if (keyA > keyB) return 1;
    return 0;
  });

  var ul = $('.map-locations-list');
  $.each(items, function (i, li) {
    ul.append(li);
  });

  var custombootstrapJSON;
  var toolCategories;

  $.ajax({
      url: '/location/json',
      type: "GET",
      async: false,
      dataType: "json",
      success: function (data) {
        custombootstrapJSON = data;
      },
      error: function (error) {
        console.log(`Error ${error}`);
      }
  });

  $.ajax({
      url: '/tool-categories',
      type: "GET",
      async: false,
      dataType: "json",
      success: function (data) {
        var output = [];

        data.forEach(function(item) {
          var existing = output.filter(function(v, i) {
            return v.name == item.name;
          });
          if (existing.length) {
            var existingIndex = output.indexOf(existing[0]);
            output[existingIndex].locations = output[existingIndex].locations.concat(item.locations);
          } else {
            if (typeof item.locations == 'string'){
              item.locations = [item.locations];
            }
            output.push(item);
          }
        });

        toolCategories = output;
      },
      error: function (error) {
        console.log(`Error ${error}`);
      }
  });

  var custombootstrapData = {};
  var map, markers;

  $.each(custombootstrapJSON, function(i, location){
    custombootstrapData[location.slug] = location;
  });

  //opens marker popup when a location is selected
  function openPopup(self) {
    //only open popup if the location is not inactive
    if (!$(self).hasClass('inactive')) {
      var marker = custombootstrapData[$(self).attr('map-locations-list-slug')].marker;
      console.log(custombootstrapData);
      var coordinates = marker.feature.geometry.coordinates;
      //center marker and open its popup (coordinates from geoJSON are flipped in terms of latitude and longitude)
      map.panTo([coordinates[1], coordinates[0]], marker._zIndex);
      marker.openPopup();
    }
  }


  L.mapbox.accessToken = 'pk.eyJ1Ijoic2xhYiIsImEiOiJja2lnZ2FuajAwMWIxMnpwOGliNjM2YmxuIn0.bRm0Q9RBHGIpyobJOWJ5zQ';

  map = L.mapbox.map('map', 'mapbox.streets')
  .setView([38.035544, -78.505186], 15.55)

  if (map.scrollWheelZoom) {
    map.scrollWheelZoom.disable();
  }

  //creates markers using "features" in the geojson

  markers = L.mapbox.featureLayer()
    .loadURL('https://custombootstrap.uvacreate.virginia.edu/location/geojson')
    .addTo(map);

  markers.on('layeradd', function (e) {
    var marker = e.layer,
      feature = marker.feature;

    var locationData = custombootstrapData[feature.properties["location-slug"]];
    // //add marker object to data so the marker can be accessed later
    locationData.marker = marker;

    var locationTitle = '<h2><b><a class="marker-popup-title" href="/location/' + feature.properties["location-slug"] + '" target="_blank">' + feature.properties["name"] + '</a></b></h2>';
    var websiteName = '<p><a href="' + feature.properties["URL"] + '" target="_blank">' + feature.properties["URL"] + '</a><p>';

    //adds icons to popup
    var iconsList = '<div class="marker-popup-icons-container"><ul class="marker-popup-icons-list">';
    toolCategories.forEach(function (t) {
      if (t.locations.includes(locationData.slug)) {
        iconsList += '<li>' +
          '<img src="' + t.icon + '">' +
          '</li>'
      }
    })
    iconsList += "</ul></div>";

      //bind popup to marker
    var popup = L.popup({
      closeButton: false,
      className: "marker-popup"
    })
      .setContent(locationTitle + websiteName + iconsList)
    marker.bindPopup(popup);
  });

  //when a filter is clicked
  //$('.map-filter-list li').click(function(e) {
  $('.map-filter-item').click(function (e) {
    e.preventDefault()
    //all other filers become inactive
    //$(this).parent().find('li').removeClass('active');
    $('.map-filter-item').removeClass('active');
    //all locations in the locations list become inactive
    $('.map-locations-list').find('li').removeClass();
    //the filter that is clicked is active
    $(this).addClass('active');

    var filter = $(this).data('filter');

    var filtered_locations = [];
    // only make locations active if a filter is applied
    if (filter != 'all') {
      //find locations that has tools of that category
      filtered_locations = toolCategories.filter(function (toolCategory) {
        return toolCategory.name.replace(/ /g, "-").toLowerCase() == filter;
      })[0].locations;

      //highlight locations on the locations list (made active)
      filtered_locations.forEach(function (l) {
        if (l) {
          $('.map-locations-list').find('[map-locations-list-slug=' + l + "]").addClass('active');
        }else {
          return false;
        }
      })

      //makes all locations that are not filtered inactive
      $('.map-locations-list li').each(function (index, li) {
        if (!$(li).hasClass('active')) {
          $(li).addClass('inactive')
        }
      })
    }

    if (filter == 'all') {
      //pan to original position if "show all" is selected
      map.panTo([38.035544, -78.505186], 15.55);
      //$('.map-locations-list').find('li').removeClass();
      $('.map-locations-list').find('li').removeClass();
    }

    //mapbox: show/hide location markers that are filtered
    markers.setFilter(function (f) {
      // If the data-filter attribute is set to "all", return
      // all (true). Otherwise, filter on the locations that are in the toolcategory.
      return (filter === 'all') ? true : filtered_locations.includes(f.properties["location-slug"]);
    });

    return false;
  });

</script>