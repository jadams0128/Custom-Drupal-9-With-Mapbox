{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

<div class="location-header white-text custom-block-title text-center mar-top-20 mar-bottom-20">
	{{ label }}
</div>

<div class="location-container no-padding white-bg" {{ attributes }}>
	<div class="location-header-image text-center">

    {% if node.field_lab_image is not empty %}
      <img src="{{ file_url(node.field_lab_image.entity.uri.value) }}">
    {% else %}
      <img src="/sites/default/files/default_images/no-location.png">
    {% endif %}

		<div class="location-body text-left padding-25">
			{{ node.body.value|raw }}
		</div>

    {% if node.field_link.uri is not empty %}
      <div class="location-lab-link text-left padding-25">
        <a class="btn makergr-btn" href="{{ node.field_link.uri }}" target="_blank">{{ node.field_link.title }}</a>
      </div>
    {% endif %}
		
	</div>

	<div class="location-meta padding-25">
		<table class="responsive-table striped">
        <tbody>
          <tr>
            <td>
              <h4>Location:</h4>
            </td>
            <td>
              <p class="location-info">{{ node.field_location.value }}</p>
            </td>
          </tr>
          <tr>
            <td>
              <h4>Access:</h4>
            </td>
            <td>
              <p class="location-info">{{ node.field_access.value|raw }}</p>
            </td>
          </tr>
          <tr>
            <td>
              <h4>Hours:</h4>
            </td>
            <td>
              <p class="location-info">{{ node.field_hours.value|raw }}</p>
            </td>
          </tr>
          <tr>
            <td>
              <h4>Contact:</h4>
            </td>
            <td>
              <p class="location-info">
                <i class="material-icons">Email: </i>
                <a class="mailto" href="mailto:{{ node.field_email.value }}">{{ node.field_email.value }}</a>
              </p>
              <p class="location-info">
                <i class="material-icons">Phone: </i>
                <a class="phone" href="tel:{{ node.field_phone.value }}">{{ node.field_phone.value }}</a>
              </p>
            </td>
          </tr>
        </tbody>
      </table>
	</div>

  {% if node.field_images is not empty %}
    <div class="location-images padding-25">
      <h1>Images</h1>
      <div class="row">
        {% for item in node.field_images %}
          <div class="col-lg-3 col-md-4 col-6">
            <a href="{{ file_url(item.entity.uri.value) }}" target="_blank"><img src="{{ file_url(item.entity.uri.value) }}" class="img-fluid img-thumbnail" alt="{{ item.alt }}"></a>
          </div>
        {% endfor %}
      </div>  
    </div>
  {% endif %}

  <div class="location-tools padding-25">
    {{ drupal_view('tools', 'tools_by_location') }}
  </div>

  <div class="location-people padding-25">
    {{ drupal_view('user_admin_people', 'people_by_location') }}
  </div>
</div>








